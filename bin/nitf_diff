#! /usr/bin/env python
import pynitf
import importlib.util
import sys
import logging
import json
import os
import collections.abc
import warnings

version="June 13, 2022"
usage="""Usage: 
  nitf_diff [options] <file1> <file2> [<json_delta>]
  nitf_diff -h | --help
  nitf_diff -v | --version

This compares two nitf files, and determines if they are the same are not.

In general, there can be all kinds of special cases you want in a compare.
For example, you might want a particular image segment compared with a 
tolerance rather than exactly. You might want a TRE compared, but ignore
certain fields for example, or use a special way to compare images. We
take configuration information to control this.

There are two forms of configuration data. For simpler configuration, 
a JSON file can be supplied. This provides a configuration hash that is
merged in with the default configuration set up in pynitf and other 
modules listed on NITF_PLUGIN environment variable list.

If you need to supply special handlers, you can load arbitrary python code.
The code should have the general format:

   from __main__ import nitf_diff

   nitf_diff.handle_set.add_handle(my_handle)
   nitf_diff.config["My key"] = "My value"

Options:
  -h --help         
       Print this message

  --config-file-json=f
       Give a json file to supply configuration parameters. This is merged
       in with the default configuration set up by pynitf.

   --config-file-python=f
       Load arbitrary python code from the given file.

  --debug
       Turn debugging information on
       
  --log-file=f
       Give a path for the logs to be written to. This goes to both the screen
       an the log file, compare with --log-file-only

  --log-file-only=f
       Write logs only to the log file, not also to the screen.

  --no-color
       Don't colorize output. Only applies to the screen, we never put
       color into log files.

  --quiet
       Don't print any messages, just return an overall status code.

  --tre-warning-as-error
       Normally we warn about any error parsing a TRE and then continue
       treating that as a TreUnknown. With this option we instead treat this
       as an error.

  --verbose
       Give more verbose messages (turn debugging on

  -v --version      
       Print program version

"""
args = pynitf.docopt_simple.docopt_simple(usage, version=version)

# Load plugins for nitf
if "NITF_PLUGIN" in os.environ:
    for m in os.environ["NITF_PLUGIN"].split(":"):
        if m != "":
            exec("import %s" % m)

if(args.tre_warning_as_error):
    warnings.filterwarnings("error", category=pynitf.TreWarning)
else:
    # The MATESA TRE changed between v 0.1 and 1.0 of the SNIP. The RIP
    # data uses the old format. We can't do anything about this, so just
    # ignore warning messages about this TRE. 
    warnings.filterwarnings("ignore", "Trouble reading TRE MATESA",
                            category=pynitf.TreWarning)
            
nitf_diff = pynitf.NitfDiff()

if(args.config_file_json):
    with open(args.config_file_json) as json_file:
        nitf_diff.update_config(json.load(json_file))
if(args.config_file_python):
    spec = importlib.util.spec_from_file_location("config_file",
                                                  args.config_file_python)
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    sys.modules["config_file"] = module

logger = logging.getLogger('nitf_diff')
fh = None
if(args.log_file_only or args.log_file):
    fh = logging.FileHandler(args.log_file_only or args.log_file)
    fh.setFormatter(pynitf.DifferenceFormatter(add_color = False))
    fh.setLevel(logging.INFO)
    logger.addHandler(fh)
dformat = pynitf.DifferenceFormatter(add_color = not args.no_color)
h = None
if(not args.log_file_only):    
    h = logging.StreamHandler()
    h.setFormatter(dformat)
    logger.addHandler(h)
if(args.debug):
    if(h):
        h.setLevel(logging.DEBUG)
    logger.setLevel(logging.DEBUG)
elif(args.verbose):
    if(h):
        h.setLevel(logging.INFO)
    logger.setLevel(logging.INFO)
elif(args.quiet):
    if(h):
        h.setLevel(1000)
    logger.setLevel(1000)
else:    
    if(h):
        h.setLevel(logging.WARNING)
    logger.setLevel(logging.WARNING)

if(fh):
    print("Comparing file 1: %s" % os.path.abspath(args.file1), file=fh.stream)
    print("Comparing file 2: %s" % os.path.abspath(args.file2), file=fh.stream)
    if(args.json_delta):
        print("JSON delta file: %s" % os.path.abspath(args.json_delta), file=fh.stream)
    
is_same = nitf_diff.compare(args.file1, args.file2, args.json_delta)

if(not is_same):
    if(fh):
        print("Files are different", file=fh.stream)
    if(not args.quiet):
        print(dformat.color_text("Files are different", logging.ERROR))
    sys.exit(1)
    
if(not args.quiet):
    if(fh):
        print("Files are the same", file=fh.stream)
    print(dformat.color_text("Files are the same", pynitf.DIFFERENCE_DETAIL))
    
