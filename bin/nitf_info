#! /usr/bin/env python
import pynitf
import importlib.util
import subprocess
import os
import sys
import warnings

version="March 3, 2020"
usage="""Usage: 
  nitf_info [options] <input_file>
  nitf_info -h | --help
  nitf_info -v | --version

Print out information about a NITF file.

Options:
  -h --help         
       Print this message

  --config-file=f
       Load arbitrary python code from the given file. Useful if you need
       to do any modifications to read a file (e.g., ignore a TRE that 
       isn't processing correctly, adding some special handling).

  --debug
       Turn on debugging statements in pynitf

  --report-raw
       Some plugins might turn more complicated structures into more
       complicated objects and report them, e.g., geocal with RSM. In
       many cases you want that, but in some cases you might want to view
       the raw field data without having in interpreted. Use this option
       to report the raw fields instead.

  --summary
       Write out a summary, rather than detailed information.

  --tre-warning-as-error
       Normally we warn about any error parsing a TRE and then continue
       treating that as a TreUnknown. With this option we instead treat this
       as an error.

  -v --version      
       Print program version

"""
args = pynitf.docopt_simple.docopt_simple(usage, version=version)

# Load plugins for nitf
if "NITF_PLUGIN" in os.environ:
    for m in os.environ["NITF_PLUGIN"].split(":"):
        exec("import %s" % m)

if(args.tre_warning_as_error):
    warnings.filterwarnings("error", category=pynitf.TreWarning)
else:
    # The MATESA TRE changed between v 0.1 and 1.0 of the SNIP. The RIP
    # data uses the old format. We can't do anything about this, so just
    # ignore warning messages about this TRE. 
    warnings.filterwarnings("ignore", "Trouble reading TRE MATESA",
                            category=pynitf.TreWarning)

if(args.config_file):
    spec = importlib.util.spec_from_file_location("config_file",
                                                  args.config_file)
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    sys.modules["config_file"] = module
    
if(args.debug):
    pynitf.nitf_field.DEBUG = True
    pynitf.nitf_des.DEBUG = True
f = pynitf.NitfFile(args.input_file)
f.report_raw = args.report_raw
if(args.summary):
    print(f.summary())
else:
    print(f)
